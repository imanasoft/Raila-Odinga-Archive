---
import BaseLayout from '@layouts/BaseLayout.astro';
import { getEntry } from 'astro:content';
import { parse } from 'yaml';

import { primaryNav } from '@config/navigation';
import type { SpeechEntry } from '@types/content';
import { mapSourceIds } from '@utils/sources';

const navItems = [...primaryNav];

const pageEntry = await getEntry('pages', 'speeches');
const { Content } = await pageEntry.render();
const hero = pageEntry.data.hero;

const speechModules = import.meta.glob<string>('../../content/speeches/*.yaml', {
  eager: true,
  query: '?raw',
  import: 'default'
});

const speeches = Object.values(speechModules)
  .map((content) => parse(content) as SpeechEntry)
  .sort((a, b) => {
    const aDate = a.delivery?.date ? new Date(a.delivery.date).getTime() : Number.NEGATIVE_INFINITY;
    const bDate = b.delivery?.date ? new Date(b.delivery.date).getTime() : Number.NEGATIVE_INFINITY;
    return bDate - aDate;
  });

const sections = new Map(pageEntry.data.sections.map((section) => [section.id, section]));
const updatedAt = pageEntry.data.updated.toISOString();

---
<BaseLayout title={pageEntry.data.title} description={pageEntry.data.description} updatedAt={updatedAt} navItems={navItems}>
  <section class="hero" aria-labelledby="speeches-hero">
    {hero?.eyebrow && <p class="site-section__eyebrow">{hero.eyebrow}</p>}
    <h1 id="speeches-hero" class="site-section__title">{hero?.heading ?? pageEntry.data.title}</h1>
    {hero?.summary && <p class="site-section__intro">{hero.summary}</p>}
  </section>

  <article class="prose" aria-labelledby="speeches-narrative">
    <h2 id="speeches-narrative" class="visually-hidden">Narrative overview</h2>
    <Content />
  </article>

  {sections.get('speech-list') && (
    <section class="site-section" id="speech-list" aria-labelledby="speech-list-title">
      <p class="site-section__eyebrow">{sections.get('speech-list')?.eyebrow}</p>
      <h2 id="speech-list-title" class="site-section__title">{sections.get('speech-list')?.title}</h2>
      {sections.get('speech-list')?.summary && <p class="site-section__intro">{sections.get('speech-list')?.summary}</p>}
      <div class="card-stack">
        {speeches.map((speech) => {
          const speechSources = speech.sources ?? [];
          const sourceMetas = mapSourceIds(speechSources.map((source) => source.source_id));
          const deliveryDate = speech.delivery?.date ? new Date(speech.delivery.date) : undefined;
          return (
            <article class="speech-card">
              <header>
                <h3>{speech.title}</h3>
                <p class="speech-card__meta">
                  {deliveryDate && <time dateTime={speech.delivery?.date}>{deliveryDate.toISOString().slice(0, 10)}</time>}
                  {speech.delivery?.venue && ` · ${speech.delivery.venue}`}
                  {speech.delivery?.city && `, ${speech.delivery.city}`}
                </p>
              </header>
              {speech.summary && <p>{speech.summary}</p>}
              {speech.abstract?.en && <p>{speech.abstract.en}</p>}
              <ul class="speech-card__tags">
                {(speech.topics ?? []).map((topic) => (
                  <li>{topic}</li>
                ))}
              </ul>
              <p class="speech-card__links">
                {speech.transcript?.path ? (
                  <a href={`/${speech.transcript.path}`}>Read transcript</a>
                ) : (
                  <span>Transcript forthcoming</span>
                )}
                {speech.media && speech.media.length > 0 && (
                  <>
                    {' · '}<a href="/media">Related media</a>
                  </>
                )}
              </p>
              {sourceMetas.length > 0 && (
                <footer class="citation-footer" aria-label={`Sources for ${speech.title}`}>
                  <span>Sources:</span>
                  <ul>
                    {sourceMetas.map((source) => (
                      <li>
                        {source.url ? (
                          <a href={source.url} rel="noopener" target="_blank">{source.publisher ?? source.title}</a>
                        ) : (
                          <span>{source.publisher ?? source.title}</span>
                        )}
                      </li>
                    ))}
                  </ul>
                </footer>
              )}
            </article>
          );
        })}
      </div>
    </section>
  )}

  {sections.get('research-tools') && (
    <section class="site-section" id="research-tools" aria-labelledby="research-tools-title">
      <p class="site-section__eyebrow">{sections.get('research-tools')?.eyebrow}</p>
      <h2 id="research-tools-title" class="site-section__title">{sections.get('research-tools')?.title}</h2>
      {sections.get('research-tools')?.summary && <p class="site-section__intro">{sections.get('research-tools')?.summary}</p>}
      <p class="related-links">
        Use browser search (⌘+F or Ctrl+F) within transcripts, and reference the <a href="/policies">policy dossiers</a> to
        understand how rhetoric links to programme delivery.
      </p>
    </section>
  )}
</BaseLayout>

<style>
.hero {
  padding-block: var(--space-7);
}

.card-stack {
  display: grid;
  gap: var(--space-4);
}

.speech-card {
  border: 1px solid var(--color-border-default);
  border-radius: var(--border-radius-md);
  padding: var(--space-4);
  background: var(--color-surface-subtle);
  display: grid;
  gap: var(--space-3);
}

.speech-card__meta {
  margin: 0;
  color: var(--color-text-secondary);
}

.speech-card__tags {
  list-style: none;
  margin: 0;
  padding: 0;
  display: flex;
  flex-wrap: wrap;
  gap: var(--space-2);
}

.speech-card__tags li {
  font-family: var(--font-family-sans);
  font-size: var(--font-size-75);
  text-transform: uppercase;
  letter-spacing: 0.08em;
  background: var(--color-surface-default);
  border: 1px solid var(--color-border-default);
  border-radius: var(--border-radius-pill);
  padding: 0.15rem 0.5rem;
}

.speech-card__links {
  margin: 0;
  font-family: var(--font-family-sans);
}

.citation-footer {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  gap: var(--space-2);
  font-family: var(--font-family-sans);
  font-size: var(--font-size-75);
  color: var(--color-brand-secondary);
}

.citation-footer > span {
  text-transform: uppercase;
  letter-spacing: 0.16em;
  font-weight: var(--font-weight-semibold);
}

.citation-footer ul {
  list-style: none;
  margin: 0;
  padding: 0;
  display: flex;
  flex-wrap: wrap;
  gap: var(--space-2);
}

.citation-footer li a,
.citation-footer li span {
  display: inline-flex;
  align-items: center;
  padding: 0.25rem 0.65rem;
  border-radius: 999px;
  border: 1px solid var(--color-border-accent);
  background: var(--color-surface-highlight);
  color: var(--color-brand-secondary);
  text-decoration: none;
  transition: background-color var(--motion-duration-standard) var(--motion-easing-standard),
    color var(--motion-duration-standard) var(--motion-easing-standard),
    border-color var(--motion-duration-standard) var(--motion-easing-standard);
}

.citation-footer li a:hover,
.citation-footer li a:focus-visible {
  background: var(--color-brand-secondary);
  color: var(--color-text-inverse);
  border-color: var(--color-brand-secondary);
}

.related-links {
  font-family: var(--font-family-sans);
}

.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}
</style>
