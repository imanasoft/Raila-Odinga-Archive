---
import BaseLayout from '@layouts/BaseLayout.astro';
import { getEntry } from 'astro:content';
import { parse } from 'yaml';

import { primaryNav } from '@config/navigation';
import type { MediaEntry } from '@types/content';
import { mapSourceIds } from '@utils/sources';

const navItems = [...primaryNav];

const pageEntry = await getEntry('pages', 'media');
const { Content } = await pageEntry.render();
const hero = pageEntry.data.hero;

const mediaModules = import.meta.glob<string>('../../content/media/*.yaml', {
  eager: true,
  query: '?raw',
  import: 'default'
});

const mediaItems = Object.values(mediaModules)
  .map((content) => parse(content) as MediaEntry)
  .sort((a, b) => {
    const aDate = a.capture_date ? new Date(a.capture_date).getTime() : Number.POSITIVE_INFINITY;
    const bDate = b.capture_date ? new Date(b.capture_date).getTime() : Number.POSITIVE_INFINITY;
    return aDate - bDate;
  });

const sections = new Map(pageEntry.data.sections.map((section) => [section.id, section]));
const updatedAt = pageEntry.data.updated.toISOString();

---
<BaseLayout title={pageEntry.data.title} description={pageEntry.data.description} updatedAt={updatedAt} navItems={navItems}>
  <section class="hero" aria-labelledby="media-hero">
    {hero?.eyebrow && <p class="site-section__eyebrow">{hero.eyebrow}</p>}
    <h1 id="media-hero" class="site-section__title">{hero?.heading ?? pageEntry.data.title}</h1>
    {hero?.summary && <p class="site-section__intro">{hero.summary}</p>}
  </section>

  <article class="prose" aria-labelledby="media-narrative">
    <h2 id="media-narrative" class="visually-hidden">Narrative overview</h2>
    <Content />
  </article>

  {sections.get('gallery') && (
    <section class="site-section" id="gallery" aria-labelledby="gallery-title">
      <p class="site-section__eyebrow">{sections.get('gallery')?.eyebrow}</p>
      <h2 id="gallery-title" class="site-section__title">{sections.get('gallery')?.title}</h2>
      {sections.get('gallery')?.summary && <p class="site-section__intro">{sections.get('gallery')?.summary}</p>}
      <div class="media-grid">
        {mediaItems.map((item) => {
          const mediaSources = item.sources ?? [];
          const sourceMetas = mapSourceIds(mediaSources.map((source) => source.source_id));
          const frameClass = `media-card__frame media-card__frame--${item.type}`;
          return (
            <figure class="media-card" id={`media-${item.slug}`}>
              <div class={frameClass}>
                <span class="media-card__badge" aria-hidden="true">{item.type}</span>
                {item.type === 'image' && item.preview_url ? (
                  <img src={item.preview_url} alt={item.alt_text} loading="lazy" />
                ) : item.type === 'video' && item.embed_url ? (
                  <iframe
                    src={item.embed_url}
                    title={item.title}
                    loading="lazy"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                    allowfullscreen
                  ></iframe>
                ) : (
                  <div class="media-card__placeholder" aria-hidden="true">
                    <span>Preview unavailable</span>
                  </div>
                )}
              </div>
              <figcaption>
                <h3>{item.title}</h3>
                {item.caption && <p>{item.caption}</p>}
                <dl class="media-card__meta">
                  {item.capture_date && (
                    <div>
                      <dt>Date</dt>
                      <dd>{item.capture_date}</dd>
                    </div>
                  )}
                  {item.credit && (
                    <div>
                      <dt>Credit</dt>
                      <dd>{item.credit}</dd>
                    </div>
                  )}
                  {item.license && (
                    <div>
                      <dt>License</dt>
                      <dd>{item.license}</dd>
                    </div>
                  )}
                </dl>
                <p class="media-card__links">
                  {item.source_asset_url && (
                    <a href={item.source_asset_url} rel="noopener" target="_blank">Original asset</a>
                  )}
                  {item.transcript && (
                    <>
                      {' Â· '}<a href={`/${item.transcript}`}>Transcript</a>
                    </>
                  )}
                </p>
                {sourceMetas.length > 0 && (
                  <p class="media-card__sources">
                    Sources:{' '}
                    {sourceMetas.map((source, index) => (
                      <>
                        {index > 0 && ', '}
                        {source.url ? (
                          <a href={source.url} rel="noopener" target="_blank">{source.publisher ?? source.title}</a>
                        ) : (
                          source.publisher ?? source.title
                        )}
                      </>
                    ))}
                  </p>
                )}
              </figcaption>
            </figure>
          );
        })}
      </div>
    </section>
  )}

  {sections.get('usage') && (
    <section class="site-section" id="usage" aria-labelledby="usage-title">
      <p class="site-section__eyebrow">{sections.get('usage')?.eyebrow}</p>
      <h2 id="usage-title" class="site-section__title">{sections.get('usage')?.title}</h2>
      {sections.get('usage')?.summary && <p class="site-section__intro">{sections.get('usage')?.summary}</p>}
      <p class="related-links">
        Media entries include alt text, captions, and transcript pointers. Please consult the <a href="/credits">Credits page</a>
        for licence details before reuse.
      </p>
    </section>
  )}
</BaseLayout>

<style>
.hero {
  padding-block: var(--space-7);
}

.media-grid {
  display: grid;
  gap: var(--space-4);
}

@media (min-width: 56rem) {
  .media-grid {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
}

.media-card {
  border: 1px solid var(--color-border-default);
  border-radius: var(--border-radius-md);
  padding: var(--space-4);
  background: var(--color-surface-subtle);
  display: grid;
  gap: var(--space-3);
}

.media-card__frame {
  position: relative;
  border-radius: var(--border-radius-sm);
  overflow: hidden;
  background: var(--color-surface-default);
  border: 1px solid var(--color-border-subtle);
  aspect-ratio: 16 / 9;
  display: grid;
  place-items: center;
}

.media-card__frame--image img,
.media-card__frame--video iframe {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border: 0;
  display: block;
}

.media-card__frame--video iframe {
  background: var(--color-surface-default);
}

.media-card__badge {
  position: absolute;
  inset: var(--space-2) auto auto var(--space-2);
  padding: 0.25rem 0.65rem;
  border-radius: 999px;
  background: rgba(7, 30, 73, 0.75);
  color: var(--color-text-inverse);
  font-family: var(--font-family-sans);
  font-size: var(--font-size-75);
  letter-spacing: 0.08em;
  text-transform: uppercase;
}

.media-card__placeholder {
  padding: var(--space-4);
  font-family: var(--font-family-sans);
  font-size: var(--font-size-75);
  text-align: center;
  color: var(--color-text-secondary);
}

.media-card__meta {
  display: grid;
  gap: var(--space-2);
  margin: 0;
}

.media-card__meta div {
  display: flex;
  gap: var(--space-2);
}

.media-card__meta dt {
  font-family: var(--font-family-sans);
  font-size: var(--font-size-75);
  text-transform: uppercase;
  letter-spacing: 0.08em;
  color: var(--color-text-secondary);
}

.media-card__meta dd {
  margin: 0;
}

.media-card__links {
  margin: 0;
  font-family: var(--font-family-sans);
}

.media-card__sources {
  margin: 0;
  font-size: var(--font-size-75);
  color: var(--color-text-secondary);
}

.related-links {
  font-family: var(--font-family-sans);
}

.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}
</style>
