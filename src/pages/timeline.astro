---
import BaseLayout from '@layouts/BaseLayout.astro';
import TimelineExplorer from '@components/TimelineExplorer.astro';
import { getEntry } from 'astro:content';
import { primaryNav } from '@config/navigation';
import type { TimelineDisplayEvent, TimelineEventEntry } from '@types/content';
import { parse } from 'yaml';

const navItems = [...primaryNav];

const pageEntry = await getEntry('pages', 'timeline');
const { Content } = await pageEntry.render();
const hero = pageEntry.data.hero;

const eventModules = import.meta.glob<string>('../../content/events/*.yaml', {
  eager: true,
  query: '?raw',
  import: 'default'
});
const rawEvents = Object.values(eventModules).map((content) => parse(content) as TimelineEventEntry);

const parsedEvents = rawEvents
  .map((event) => {
    const startDate = event.span?.start?.date ? new Date(event.span.start.date) : undefined;
    if (!startDate || Number.isNaN(startDate.valueOf())) {
      return undefined;
    }
    const endDate = event.span?.end?.date ? new Date(event.span.end.date) : undefined;
    const startYear = startDate.getUTCFullYear();
    const endYear = endDate && !Number.isNaN(endDate.valueOf()) ? endDate.getUTCFullYear() : undefined;
    const decadeValue = Math.floor(startYear / 10) * 10;
    const intensity = event.timeline_display?.intensity ?? 'medium';
    const timelineTopics = event.timeline_display?.filters ?? [];
    const categories = event.categories ?? [];
    const topics = Array.from(new Set([...timelineTopics, ...categories])).filter(Boolean);
    const description = event.description?.en
      ?.split('\n')
      .map((line) => line.trim())
      .filter(Boolean)
      .join(' ');

    return {
      id: event.id,
      title: event.title,
      summary: event.summary,
      description,
      startISO: startDate.toISOString(),
      endISO: endDate && !Number.isNaN(endDate.valueOf()) ? endDate.toISOString() : undefined,
      startYear,
      endYear,
      decadeLabel: `${decadeValue}s`,
      decadeValue,
      topics,
      intensity: (['low', 'medium', 'high'] as const).includes(intensity as never) ? (intensity as 'low' | 'medium' | 'high') : 'medium',
      locationId: event.location?.location_id,
      sources: event.sources
    } satisfies TimelineDisplayEvent;
  })
  .filter((event): event is TimelineDisplayEvent => Boolean(event));

const sortedEvents = parsedEvents.sort((a, b) => a.startISO.localeCompare(b.startISO));

const decadeOptions = Array.from(new Set(sortedEvents.map((event) => event.decadeValue)))
  .sort((a, b) => a - b)
  .map((value) => ({ label: `${value}s`, value: value.toString() }));

const topicOptions = Array.from(new Set(sortedEvents.flatMap((event) => event.topics))).sort((a, b) =>
  a.localeCompare(b, 'en')
);

let selectedDecade = Astro.url.searchParams.get('decade') ?? 'all';
if (selectedDecade !== 'all' && !decadeOptions.some((option) => option.value === selectedDecade)) {
  selectedDecade = 'all';
}

let selectedTopic = Astro.url.searchParams.get('topic') ?? 'all';
if (selectedTopic !== 'all' && !topicOptions.includes(selectedTopic)) {
  selectedTopic = 'all';
}

const filteredEvents = sortedEvents.filter((event) => {
  const decadeMatch = selectedDecade === 'all' || event.decadeValue.toString() === selectedDecade;
  const topicMatch = selectedTopic === 'all' || event.topics.includes(selectedTopic);
  return decadeMatch && topicMatch;
});

const updatedAt = sortedEvents.at(-1)?.startISO ?? pageEntry.data.updated.toISOString();
---
<BaseLayout title={pageEntry.data.title} description={pageEntry.data.description} updatedAt={updatedAt} navItems={navItems}>
  <section class="hero" aria-labelledby="timeline-hero">
    {hero?.eyebrow && <p class="site-section__eyebrow">{hero.eyebrow}</p>}
    <h1 id="timeline-hero" class="site-section__title">{hero?.heading ?? pageEntry.data.title}</h1>
    {hero?.summary && <p class="site-section__intro">{hero.summary}</p>}
  </section>

  <article class="prose" aria-labelledby="timeline-narrative">
    <h2 id="timeline-narrative" class="visually-hidden">Narrative overview</h2>
    <Content />
  </article>

  <section class="site-section" aria-labelledby="timeline-explorer-heading">
    <h2 id="timeline-explorer-heading" class="visually-hidden">Interactive timeline</h2>
    <TimelineExplorer
      allEvents={sortedEvents}
      filteredEvents={filteredEvents}
      decades={decadeOptions}
      topics={topicOptions}
      selectedDecade={selectedDecade}
      selectedTopic={selectedTopic}
    />
  </section>
</BaseLayout>

<style>
.hero {
  padding-block: var(--space-7);
}

.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}
</style>

